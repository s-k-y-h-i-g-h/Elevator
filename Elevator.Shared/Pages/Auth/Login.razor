@page "/login"
@using Elevator.Shared.Services.Interfaces
@using Radzen
@using Radzen.Blazor
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>Login - Elevator</PageTitle>

<div class="rz-p-4">
    <RadzenCard class="rz-mx-auto" Style="max-width: 400px;">
        <RadzenStack Gap="1rem">
            <RadzenText TextStyle="TextStyle.H4" class="rz-text-align-center">
                Login to Elevator
            </RadzenText>
            
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                
                <RadzenStack Gap="1rem">
                    <RadzenFormField Text="Email" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@loginModel.Email" 
                                     Placeholder="Enter your email" 
                                     Style="width: 100%;" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </RadzenFormField>
                    
                    <RadzenFormField Text="Password" Variant="Variant.Outlined">
                        <RadzenPassword @bind-Value="@loginModel.Password" 
                                      Placeholder="Enter your password" 
                                      Style="width: 100%;" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </RadzenFormField>
                    
                    <RadzenButton ButtonType="ButtonType.Submit" 
                                Size="ButtonSize.Large" 
                                Text="Login" 
                                Style="width: 100%;" 
                                IsBusy="@isLoading" />
                </RadzenStack>
            </EditForm>
            
            <RadzenText TextStyle="TextStyle.Body2" class="rz-text-align-center">
                Don't have an account? 
                <RadzenLink Path="/register" Text="Register here" />
            </RadzenText>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Redirect if already authenticated
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            
            if (result.Success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Login Successful",
                    Detail = $"Welcome back, {result.User?.FirstName ?? result.User?.Email}!",
                    Duration = 4000
                });
                
                Navigation.NavigateTo("/");
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Login Failed",
                    Detail = result.ErrorMessage ?? "Invalid email or password",
                    Duration = 4000
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Login Error",
                Detail = "An unexpected error occurred. Please try again.",
                Duration = 4000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
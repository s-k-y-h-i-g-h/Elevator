@page "/register"
@using Elevator.Shared.Services.Interfaces
@using Radzen
@using Radzen.Blazor
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>Register - Elevator</PageTitle>

<div class="rz-p-4">
    <RadzenCard class="rz-mx-auto" Style="max-width: 400px;">
        <RadzenStack Gap="1rem">
            <RadzenText TextStyle="TextStyle.H4" class="rz-text-align-center">
                Join Elevator
            </RadzenText>
            
            <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
                <DataAnnotationsValidator />
                
                <RadzenStack Gap="1rem">
                    <RadzenRow>
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="First Name" Variant="Variant.Outlined">
                                <RadzenTextBox @bind-Value="@registerModel.FirstName" 
                                             Placeholder="First name" 
                                             Style="width: 100%;" />
                                <ValidationMessage For="@(() => registerModel.FirstName)" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="Last Name" Variant="Variant.Outlined">
                                <RadzenTextBox @bind-Value="@registerModel.LastName" 
                                             Placeholder="Last name" 
                                             Style="width: 100%;" />
                                <ValidationMessage For="@(() => registerModel.LastName)" />
                            </RadzenFormField>
                        </RadzenColumn>
                    </RadzenRow>
                    
                    <RadzenFormField Text="Email" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@registerModel.Email" 
                                     Placeholder="Enter your email" 
                                     Style="width: 100%;" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </RadzenFormField>
                    
                    <RadzenFormField Text="Password" Variant="Variant.Outlined">
                        <RadzenPassword @bind-Value="@registerModel.Password" 
                                      Placeholder="Enter your password" 
                                      Style="width: 100%;" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </RadzenFormField>
                    
                    <RadzenFormField Text="Confirm Password" Variant="Variant.Outlined">
                        <RadzenPassword @bind-Value="@registerModel.ConfirmPassword" 
                                      Placeholder="Confirm your password" 
                                      Style="width: 100%;" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </RadzenFormField>
                    
                    <RadzenButton ButtonType="ButtonType.Submit" 
                                Size="ButtonSize.Large" 
                                Text="Create Account" 
                                Style="width: 100%;" 
                                IsBusy="@isLoading" />
                </RadzenStack>
            </EditForm>
            
            <RadzenText TextStyle="TextStyle.Body2" class="rz-text-align-center">
                Already have an account? 
                <RadzenLink Path="/login" Text="Login here" />
            </RadzenText>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Redirect if already authenticated
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await AuthService.RegisterAsync(
                registerModel.Email, 
                registerModel.Password, 
                registerModel.FirstName, 
                registerModel.LastName);
            
            if (result.Success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Registration Successful",
                    Detail = $"Welcome to Elevator, {result.User?.FirstName ?? result.User?.Email}!",
                    Duration = 4000
                });
                
                Navigation.NavigateTo("/");
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Registration Failed",
                    Detail = result.ErrorMessage ?? "Registration failed. Please try again.",
                    Duration = 4000
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Registration Error",
                Detail = "An unexpected error occurred. Please try again.",
                Duration = 4000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class RegisterModel
    {
        public string? FirstName { get; set; }
        
        public string? LastName { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
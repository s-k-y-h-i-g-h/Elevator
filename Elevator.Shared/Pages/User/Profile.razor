@page "/profile"
@using Elevator.Shared.Services.Interfaces
@using Elevator.Shared.Services.DTOs
@using Radzen
@using Radzen.Blazor
@inject IUserService UserService
@inject IProtocolService ProtocolService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>Profile - Elevator</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (isLoading)
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
        else if (currentUser != null)
        {
            <RadzenStack Gap="2rem">
                <!-- User Info Section -->
                <RadzenCard>
                    <RadzenStack Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H3">
                            My Profile
                        </RadzenText>
                        
                        <RadzenRow>
                            <RadzenColumn Size="6">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenText TextStyle="TextStyle.Subtitle2">Name:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        @GetDisplayName()
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenText TextStyle="TextStyle.Subtitle2">Email:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        @currentUser.Email
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                        
                        <RadzenRow>
                            <RadzenColumn Size="6">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenText TextStyle="TextStyle.Subtitle2">Member Since:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        @currentUser.CreatedAt.ToString("MMMM dd, yyyy")
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenText TextStyle="TextStyle.Subtitle2">Last Login:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        @currentUser.LastLoginAt.ToString("MMMM dd, yyyy")
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenCard>

                <!-- Protocol Statistics -->
                <RadzenCard>
                    <RadzenStack Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H5">
                            Protocol Statistics
                        </RadzenText>
                        
                        <RadzenRow>
                            <RadzenColumn Size="4">
                                <RadzenCard Style="background: var(--rz-primary-lighter); border: 1px solid var(--rz-primary);">
                                    <RadzenStack Gap="0.5rem" class="rz-text-align-center">
                                        <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-primary);">
                                            @(userProtocols?.Count() ?? 0)
                                        </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle2">
                                            Total Protocols
                                        </RadzenText>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenColumn>
                            <RadzenColumn Size="4">
                                <RadzenCard Style="background: var(--rz-success-lighter); border: 1px solid var(--rz-success);">
                                    <RadzenStack Gap="0.5rem" class="rz-text-align-center">
                                        <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-success);">
                                            @GetAverageRating().ToString("F1")
                                        </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle2">
                                            Avg. Rating
                                        </RadzenText>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenColumn>
                            <RadzenColumn Size="4">
                                <RadzenCard Style="background: var(--rz-info-lighter); border: 1px solid var(--rz-info);">
                                    <RadzenStack Gap="0.5rem" class="rz-text-align-center">
                                        <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-info);">
                                            @GetTotalRatings()
                                        </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle2">
                                            Total Ratings
                                        </RadzenText>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenCard>

                <!-- My Protocols Section -->
                <RadzenCard>
                    <RadzenStack Gap="1rem">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.H5">
                                My Protocols (@(userProtocols?.Count() ?? 0))
                            </RadzenText>
                            <RadzenButton Text="Create New Protocol" 
                                        ButtonStyle="ButtonStyle.Primary" 
                                        Icon="add"
                                        Click="@(() => Navigation.NavigateTo("/protocols/create"))" />
                        </RadzenStack>
                        
                        @if (isLoadingProtocols)
                        {
                            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                        }
                        else if (userProtocols?.Any() == true)
                        {
                            <RadzenDataGrid Data="@userProtocols" 
                                           TItem="ProtocolDto" 
                                           AllowPaging="true" 
                                           PageSize="5" 
                                           AllowSorting="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="Name" Title="Protocol Name" Width="200px">
                                        <Template Context="protocol">
                                            <RadzenLink Path="@($"/protocols/{protocol.Id}")" 
                                                      Text="@protocol.Name" 
                                                      Style="font-weight: 600;" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="Description" Title="Description">
                                        <Template Context="protocol">
                                            <RadzenText TextStyle="TextStyle.Body2" Style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                                @protocol.Description
                                            </RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="Interventions" Title="Interventions" Width="100px">
                                        <Template Context="protocol">
                                            <RadzenBadge Text="@protocol.Interventions.Count.ToString()" 
                                                       BadgeStyle="BadgeStyle.Info" 
                                                       Variant="Variant.Filled" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="AverageRating" Title="Rating" Width="120px">
                                        <Template Context="protocol">
                                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                                <RadzenRating @bind-Value="@protocol.AverageRating" ReadOnly="true" Stars="5" />
                                                <RadzenText TextStyle="TextStyle.Caption">
                                                    (@protocol.RatingCount)
                                                </RadzenText>
                                            </RadzenStack>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="CreatedAt" Title="Created" Width="120px" Sortable="true">
                                        <Template Context="protocol">
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                @protocol.CreatedAt.ToString("MMM dd, yyyy")
                                            </RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Title="Actions" Width="150px" Sortable="false">
                                        <Template Context="protocol">
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                                                <RadzenButton Text="View" 
                                                            ButtonStyle="ButtonStyle.Primary" 
                                                            Size="ButtonSize.Small" 
                                                            Click="@(() => Navigation.NavigateTo($"/protocols/{protocol.Id}"))" />
                                                <RadzenButton Text="Edit" 
                                                            ButtonStyle="ButtonStyle.Secondary" 
                                                            Size="ButtonSize.Small" 
                                                            Click="@(() => Navigation.NavigateTo($"/protocols/{protocol.Id}/edit"))" />
                                            </RadzenStack>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        }
                        else
                        {
                            <RadzenCard Style="border: 2px dashed var(--rz-border-color);">
                                <RadzenStack Gap="1rem" class="rz-text-align-center">
                                    <RadzenText TextStyle="TextStyle.H6">
                                        No protocols yet
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        Create your first protocol to start tracking your biohacking journey.
                                    </RadzenText>
                                    <RadzenButton Text="Create Your First Protocol" 
                                                ButtonStyle="ButtonStyle.Primary" 
                                                Click="@(() => Navigation.NavigateTo("/protocols/create"))" />
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </RadzenStack>
                </RadzenCard>
            </RadzenStack>
        }
    </Authorized>
    <NotAuthorized>
        <RadzenCard>
            <RadzenStack Gap="1rem" class="rz-text-align-center">
                <RadzenText TextStyle="TextStyle.H5">
                    Please log in to view your profile
                </RadzenText>
                <RadzenButton Text="Login" 
                            ButtonStyle="ButtonStyle.Primary" 
                            Click="@(() => Navigation.NavigateTo("/login"))" />
            </RadzenStack>
        </RadzenCard>
    </NotAuthorized>
</AuthorizeView>

@code {
    private UserDto? currentUser;
    private IEnumerable<ProtocolDto>? userProtocols;
    private bool isLoading = true;
    private bool isLoadingProtocols = true;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            await LoadUserProfile();
            await LoadUserProtocols();
        }
        else
        {
            isLoading = false;
            isLoadingProtocols = false;
        }
    }

    private async Task LoadUserProfile()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            currentUser = await AuthService.GetCurrentUserAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error Loading Profile",
                Detail = "Failed to load your profile information.",
                Duration = 4000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserProtocols()
    {
        if (!AuthService.IsAuthenticated) return;

        isLoadingProtocols = true;
        StateHasChanged();

        try
        {
            var currentUserId = AuthService.CurrentUserId;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                userProtocols = await ProtocolService.GetUserProtocolsAsync(currentUserId);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error Loading Protocols",
                Detail = "Failed to load your protocols.",
                Duration = 4000
            });
            userProtocols = new List<ProtocolDto>();
        }
        finally
        {
            isLoadingProtocols = false;
            StateHasChanged();
        }
    }

    private string GetDisplayName()
    {
        if (currentUser != null)
        {
            if (!string.IsNullOrEmpty(currentUser.FirstName) || !string.IsNullOrEmpty(currentUser.LastName))
            {
                return $"{currentUser.FirstName} {currentUser.LastName}".Trim();
            }
            return currentUser.Email;
        }
        return "User";
    }

    private decimal GetAverageRating()
    {
        if (userProtocols?.Any() == true)
        {
            var protocolsWithRatings = userProtocols.Where(p => p.RatingCount > 0);
            if (protocolsWithRatings.Any())
            {
                return protocolsWithRatings.Average(p => p.AverageRating);
            }
        }
        return 0;
    }

    private int GetTotalRatings()
    {
        if (userProtocols?.Any() == true)
        {
            return userProtocols.Sum(p => p.RatingCount);
        }
        return 0;
    }
}
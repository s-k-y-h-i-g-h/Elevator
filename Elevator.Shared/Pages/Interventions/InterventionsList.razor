@page "/interventions"
@using Elevator.Shared.Services.Interfaces
@using Elevator.Shared.Services.DTOs
@using Radzen
@using Radzen.Blazor
@inject IInterventionService InterventionService
@inject NavigationManager Navigation

<PageTitle>Interventions - Elevator</PageTitle>

<RadzenStack Gap="2rem">
    <RadzenText TextStyle="TextStyle.H3">
        Biohacking Interventions
    </RadzenText>
    
    <RadzenCard>
        <RadzenStack Gap="1rem">
            <RadzenText TextStyle="TextStyle.H6">
                Search & Filter
            </RadzenText>
            
            <RadzenRow>
                <RadzenColumn Size="6">
                    <RadzenTextBox @bind-Value="@searchTerm" 
                                 Placeholder="Search interventions..." 
                                 Style="width: 100%;" 
                                 @oninput="@OnSearchChanged" />
                </RadzenColumn>
                <RadzenColumn Size="3">
                    <RadzenDropDown @bind-Value="@selectedType" 
                                  Data="@interventionTypes" 
                                  Placeholder="All Types" 
                                  Style="width: 100%;" 
                                  Change="@OnFilterChanged" />
                </RadzenColumn>
                <RadzenColumn Size="3">
                    <RadzenDropDown @bind-Value="@sortBy" 
                                  Data="@sortOptions" 
                                  ValueProperty="Value" 
                                  TextProperty="Text" 
                                  Style="width: 100%;" 
                                  Change="@OnSortChanged" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenCard>
    
    @if (isLoading)
    {
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else if (filteredInterventions?.Any() == true)
    {
        <RadzenDataGrid Data="@filteredInterventions" 
                       TItem="InterventionDto" 
                       AllowPaging="true" 
                       PageSize="10" 
                       AllowSorting="false"
                       RowClick="@OnRowClick"
                       Style="cursor: pointer;">
            <Columns>
                <RadzenDataGridColumn TItem="InterventionDto" Property="Name" Title="Name" Width="200px">
                    <Template Context="intervention">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                            <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">
                                @intervention.Name
                            </RadzenText>
                            <RadzenBadge Text="@intervention.InterventionType" 
                                       BadgeStyle="@GetBadgeStyle(intervention.InterventionType)" 
                                       Variant="Variant.Filled" />
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="InterventionDto" Property="Description" Title="Description">
                    <Template Context="intervention">
                        <RadzenText TextStyle="TextStyle.Body2" Style="max-width: 400px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                            @intervention.Description
                        </RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="InterventionDto" Property="AverageRating" Title="Rating" Width="120px">
                    <Template Context="intervention">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenRating @bind-Value="@intervention.AverageRating" ReadOnly="true" Stars="5" />
                            <RadzenText TextStyle="TextStyle.Caption">
                                (@intervention.RatingCount)
                            </RadzenText>
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                
                @if (showSubstanceInfo)
                {
                    <RadzenDataGridColumn TItem="InterventionDto" Property="DoseRange" Title="Dose Range" Width="120px">
                        <Template Context="intervention">
                            @if (!string.IsNullOrEmpty(intervention.DoseRange))
                            {
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @intervention.DoseRange
                                </RadzenText>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    
                    <RadzenDataGridColumn TItem="InterventionDto" Property="Duration" Title="Duration" Width="100px">
                        <Template Context="intervention">
                            @if (!string.IsNullOrEmpty(intervention.Duration))
                            {
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @intervention.Duration
                                </RadzenText>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                }
                
                <RadzenDataGridColumn TItem="InterventionDto" Title="Actions" Width="100px" Sortable="false">
                    <Template Context="intervention">
                        <RadzenButton Text="View" 
                                    ButtonStyle="ButtonStyle.Primary" 
                                    Size="ButtonSize.Small" 
                                    Click="@(() => ViewIntervention(intervention.Id))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
    else if (!isLoading)
    {
        <RadzenCard>
            <RadzenStack Gap="1rem" class="rz-text-align-center">
                <RadzenText TextStyle="TextStyle.H6">
                    No interventions found
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedType))
                    {
                        <text>Try adjusting your search or filter criteria.</text>
                    }
                    else
                    {
                        <text>No interventions are available at the moment.</text>
                    }
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    }
</RadzenStack>

@code {
    private IEnumerable<InterventionDto>? interventions;
    private IEnumerable<InterventionDto>? filteredInterventions;
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string selectedType = string.Empty;
    private string sortBy = "name";
    private bool showSubstanceInfo = true;

    private readonly List<string> interventionTypes = new() { "", "Compound", "Plant" };
    private readonly List<SortOption> sortOptions = new()
    {
        new SortOption { Value = "name", Text = "Name (A-Z)" },
        new SortOption { Value = "rating", Text = "Rating (High to Low)" },
        new SortOption { Value = "newest", Text = "Newest First" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadInterventions();
    }

    private async Task LoadInterventions()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            interventions = await InterventionService.GetInterventionsAsync();
            ApplyFiltersAndSort();
        }
        catch (Exception ex)
        {
            // Handle error - could show notification
            interventions = new List<InterventionDto>();
            filteredInterventions = new List<InterventionDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFiltersAndSort();
    }

    private void OnFilterChanged()
    {
        ApplyFiltersAndSort();
    }

    private void OnSortChanged()
    {
        ApplyFiltersAndSort();
    }

    private void ApplyFiltersAndSort()
    {
        if (interventions == null) return;

        var filtered = interventions.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(i => 
                i.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                i.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(i.ScientificName) && i.ScientificName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(i.CommonNames) && i.CommonNames.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply type filter
        if (!string.IsNullOrEmpty(selectedType))
        {
            filtered = filtered.Where(i => i.InterventionType == selectedType);
        }

        // Apply sorting
        filtered = sortBy switch
        {
            "rating" => filtered.OrderByDescending(i => i.AverageRating).ThenBy(i => i.Name),
            "newest" => filtered.OrderByDescending(i => i.CreatedAt),
            _ => filtered.OrderBy(i => i.Name)
        };

        filteredInterventions = filtered.ToList();
        
        // Show substance-specific columns only if we have substances
        showSubstanceInfo = filteredInterventions.Any(i => 
            i.InterventionType == "Compound" || i.InterventionType == "Plant");
        
        StateHasChanged();
    }

    private void OnRowClick(DataGridRowMouseEventArgs<InterventionDto> args)
    {
        ViewIntervention(args.Data.Id);
    }

    private void ViewIntervention(int id)
    {
        Navigation.NavigateTo($"/interventions/{id}");
    }

    private BadgeStyle GetBadgeStyle(string interventionType)
    {
        return interventionType switch
        {
            "Compound" => BadgeStyle.Primary,
            "Plant" => BadgeStyle.Success,
            _ => BadgeStyle.Secondary
        };
    }

    private class SortOption
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }
}
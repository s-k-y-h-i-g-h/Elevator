@page "/interventions/{id:int}"
@using Elevator.Shared.Services.Interfaces
@using Elevator.Shared.Services.DTOs
@using Radzen
@using Radzen.Blazor
@inject IInterventionService InterventionService
@inject IRatingService RatingService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>@(intervention?.Name ?? "Intervention") - Elevator</PageTitle>

@if (isLoading)
{
    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else if (intervention == null)
{
    <RadzenCard>
        <RadzenStack Gap="1rem" class="rz-text-align-center">
            <RadzenText TextStyle="TextStyle.H5">
                Intervention Not Found
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1">
                The requested intervention could not be found.
            </RadzenText>
            <RadzenButton Text="Back to Interventions" 
                        ButtonStyle="ButtonStyle.Primary" 
                        Click="@(() => Navigation.NavigateTo("/interventions"))" />
        </RadzenStack>
    </RadzenCard>
}
else
{
    <RadzenStack Gap="2rem">
        <!-- Header Section -->
        <RadzenCard>
            <RadzenStack Gap="1rem">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start">
                    <RadzenStack Gap="0.5rem">
                        <RadzenText TextStyle="TextStyle.H3">
                            @intervention.Name
                        </RadzenText>
                        <RadzenBadge Text="@intervention.InterventionType" 
                                   BadgeStyle="@GetBadgeStyle(intervention.InterventionType)" 
                                   Variant="Variant.Filled" />
                    </RadzenStack>
                    
                    <RadzenButton Text="← Back to List" 
                                ButtonStyle="ButtonStyle.Light" 
                                Click="@(() => Navigation.NavigateTo("/interventions"))" />
                </RadzenStack>
                
                <RadzenText TextStyle="TextStyle.Body1">
                    @intervention.Description
                </RadzenText>
            </RadzenStack>
        </RadzenCard>

        <!-- Rating Section -->
        <RadzenCard>
            <RadzenStack Gap="1rem">
                <RadzenText TextStyle="TextStyle.H5">
                    Community Rating
                </RadzenText>
                
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="2rem">
                    <RadzenStack Gap="0.5rem">
                        <RadzenRating @bind-Value="@intervention.AverageRating" ReadOnly="true" Stars="5" />
                        <RadzenText TextStyle="TextStyle.Body2">
                            @intervention.AverageRating.ToString("F1") out of 5 (@intervention.RatingCount @(intervention.RatingCount == 1 ? "rating" : "ratings"))
                        </RadzenText>
                    </RadzenStack>
                    
                    @if (AuthService.IsAuthenticated)
                    {
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.Subtitle2">
                                Your Rating:
                            </RadzenText>
                            <RadzenRating @bind-Value="@userRatingValue" 
                                        Stars="5" 
                                        Change="@OnUserRatingChanged" />
                            @if (isSubmittingRating)
                            {
                                <RadzenProgressBarCircular Size="ProgressBarCircularSize.Small" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                            }
                        </RadzenStack>
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Body2">
                            <RadzenLink Path="/login" Text="Login" /> to rate this intervention
                        </RadzenText>
                    }
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>

        <!-- Details Section -->
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Details">
                    <RadzenCard>
                        <RadzenStack Gap="1rem">
                            @if (intervention.InterventionType == "Plant")
                            {
                                @if (!string.IsNullOrEmpty(intervention.ScientificName))
                                {
                                    <RadzenStack Gap="0.25rem">
                                        <RadzenText TextStyle="TextStyle.Subtitle2">Scientific Name:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2" Style="font-style: italic;">@intervention.ScientificName</RadzenText>
                                    </RadzenStack>
                                }
                                
                                @if (!string.IsNullOrEmpty(intervention.CommonNames))
                                {
                                    <RadzenStack Gap="0.25rem">
                                        <RadzenText TextStyle="TextStyle.Subtitle2">Common Names:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@intervention.CommonNames</RadzenText>
                                    </RadzenStack>
                                }
                                
                                @if (!string.IsNullOrEmpty(intervention.TraditionalUses))
                                {
                                    <RadzenStack Gap="0.25rem">
                                        <RadzenText TextStyle="TextStyle.Subtitle2">Traditional Uses:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@intervention.TraditionalUses</RadzenText>
                                    </RadzenStack>
                                }
                            }
                            
                            @if (!string.IsNullOrEmpty(intervention.DoseRange))
                            {
                                <RadzenStack Gap="0.25rem">
                                    <RadzenText TextStyle="TextStyle.Subtitle2">Typical Dose Range:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@intervention.DoseRange</RadzenText>
                                </RadzenStack>
                            }
                            
                            @if (!string.IsNullOrEmpty(intervention.Duration))
                            {
                                <RadzenStack Gap="0.25rem">
                                    <RadzenText TextStyle="TextStyle.Subtitle2">Duration:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@intervention.Duration</RadzenText>
                                </RadzenStack>
                            }
                            
                            <RadzenStack Gap="0.25rem">
                                <RadzenText TextStyle="TextStyle.Subtitle2">Added:</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@intervention.CreatedAt.ToString("MMMM dd, yyyy")</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenTabsItem>
                
                @if (!string.IsNullOrEmpty(intervention.AiRetrievedInfo))
                {
                    <RadzenTabsItem Text="AI Information">
                        <RadzenCard>
                            <RadzenStack Gap="1rem">
                                <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat">
                                    <RadzenText TextStyle="TextStyle.Caption">
                                        This information was retrieved using AI and should be verified with reliable sources.
                                    </RadzenText>
                                </RadzenAlert>
                                <RadzenText TextStyle="TextStyle.Body1">
                                    @((MarkupString)intervention.AiRetrievedInfo.Replace("\n", "<br/>"))
                                </RadzenText>
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenTabsItem>
                }
                
                <RadzenTabsItem Text="Discussions (@intervention.Discussions.Count)">
                    <RadzenStack Gap="1rem">
                        @if (AuthService.IsAuthenticated)
                        {
                            <RadzenCard>
                                <RadzenStack Gap="1rem">
                                    <RadzenText TextStyle="TextStyle.H6">Start a Discussion</RadzenText>
                                    <RadzenButton Text="New Discussion" 
                                                ButtonStyle="ButtonStyle.Primary" 
                                                Click="@(() => Navigation.NavigateTo($"/discussions/new?interventionId={intervention.Id}"))" />
                                </RadzenStack>
                            </RadzenCard>
                        }
                        
                        @if (intervention.Discussions.Any())
                        {
                            @foreach (var discussion in intervention.Discussions.OrderByDescending(d => d.CreatedAt))
                            {
                                <RadzenCard>
                                    <RadzenStack Gap="0.5rem">
                                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start">
                                            <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">
                                                @discussion.Title
                                            </RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption">
                                                @discussion.CreatedAt.ToString("MMM dd, yyyy")
                                            </RadzenText>
                                        </RadzenStack>
                                        
                                        <RadzenText TextStyle="TextStyle.Body2" Style="max-height: 100px; overflow: hidden;">
                                            @discussion.Content
                                        </RadzenText>
                                        
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                                            <RadzenText TextStyle="TextStyle.Caption">
                                                by @discussion.UserName
                                            </RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption">
                                                ↑ @discussion.VoteCount votes
                                            </RadzenText>
                                            <RadzenButton Text="View Discussion" 
                                                        ButtonStyle="ButtonStyle.Light" 
                                                        Size="ButtonSize.Small" 
                                                        Click="@(() => Navigation.NavigateTo($"/discussions/{discussion.Id}"))" />
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenCard>
                            }
                        }
                        else
                        {
                            <RadzenCard>
                                <RadzenText TextStyle="TextStyle.Body2" class="rz-text-align-center">
                                    No discussions yet. Be the first to start a conversation!
                                </RadzenText>
                            </RadzenCard>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenStack>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private InterventionDetailDto? intervention;
    private bool isLoading = true;
    private decimal userRatingValue = 0;
    private bool isSubmittingRating = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadIntervention();
        await LoadUserRating();
    }

    private async Task LoadIntervention()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            intervention = await InterventionService.GetInterventionAsync(Id);
        }
        catch (Exception ex)
        {
            // Handle error
            intervention = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserRating()
    {
        if (!AuthService.IsAuthenticated || intervention == null) return;

        try
        {
            var currentUserId = AuthService.CurrentUserId;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                var userRating = await RatingService.GetUserRatingAsync(currentUserId, interventionId: intervention.Id);
                userRatingValue = userRating?.Value ?? 0;
            }
        }
        catch (Exception ex)
        {
            // Handle error silently
            userRatingValue = 0;
        }
    }

    private async Task OnUserRatingChanged(int rating)
    {
        if (!AuthService.IsAuthenticated || intervention == null) return;

        isSubmittingRating = true;
        StateHasChanged();

        try
        {
            var currentUserId = AuthService.CurrentUserId;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                var createRatingDto = new CreateRatingDto
                {
                    InterventionId = intervention.Id,
                    Value = rating,
                    UserId = currentUserId
                };

                await RatingService.CreateOrUpdateRatingAsync(createRatingDto);
                
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Rating Submitted",
                    Detail = $"You rated {intervention.Name} {rating} star{(rating == 1 ? "" : "s")}",
                    Duration = 3000
                });

                // Reload intervention to get updated average rating
                await LoadIntervention();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Rating Failed",
                Detail = "Failed to submit your rating. Please try again.",
                Duration = 4000
            });
            
            // Reset the rating value
            await LoadUserRating();
        }
        finally
        {
            isSubmittingRating = false;
            StateHasChanged();
        }
    }

    private BadgeStyle GetBadgeStyle(string interventionType)
    {
        return interventionType switch
        {
            "Compound" => BadgeStyle.Primary,
            "Plant" => BadgeStyle.Success,
            _ => BadgeStyle.Secondary
        };
    }
}
@page "/protocols"
@using Elevator.Shared.Services.Interfaces
@using Elevator.Shared.Services.DTOs
@using Radzen
@using Radzen.Blazor
@inject IProtocolService ProtocolService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Protocols - Elevator</PageTitle>

<RadzenStack Gap="2rem">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.H3">
            Biohacking Protocols
        </RadzenText>
        
        @if (AuthService.IsAuthenticated)
        {
            <RadzenButton Text="Create Protocol" 
                        ButtonStyle="ButtonStyle.Primary" 
                        Icon="add" 
                        Click="@(() => Navigation.NavigateTo("/protocols/create"))" />
        }
    </RadzenStack>
    
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Public Protocols">
                <RadzenStack Gap="1rem">
                    <RadzenCard>
                        <RadzenStack Gap="1rem">
                            <RadzenText TextStyle="TextStyle.H6">
                                Search & Filter
                            </RadzenText>
                            
                            <RadzenRow>
                                <RadzenColumn Size="8">
                                    <RadzenTextBox @bind-Value="@searchTerm" 
                                                 Placeholder="Search protocols..." 
                                                 Style="width: 100%;" 
                                                 @oninput="@OnSearchChanged" />
                                </RadzenColumn>
                                <RadzenColumn Size="4">
                                    <RadzenDropDown @bind-Value="@sortBy" 
                                                  Data="@sortOptions" 
                                                  ValueProperty="Value" 
                                                  TextProperty="Text" 
                                                  Style="width: 100%;" 
                                                  Change="@OnSortChanged" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenCard>
                    
                    @if (isLoadingPublic)
                    {
                        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    }
                    else if (filteredPublicProtocols?.Any() == true)
                    {
                        <RadzenDataGrid Data="@filteredPublicProtocols" 
                                       TItem="ProtocolDto" 
                                       AllowPaging="true" 
                                       PageSize="10" 
                                       AllowSorting="false"
                                       RowClick="@OnRowClick"
                                       Style="cursor: pointer;">
                            <Columns>
                                <RadzenDataGridColumn TItem="ProtocolDto" Property="Name" Title="Protocol Name" Width="200px">
                                    <Template Context="protocol">
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">
                                            @protocol.Name
                                        </RadzenText>
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn TItem="ProtocolDto" Property="Description" Title="Description">
                                    <Template Context="protocol">
                                        <RadzenText TextStyle="TextStyle.Body2" Style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                            @protocol.Description
                                        </RadzenText>
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn TItem="ProtocolDto" Property="UserName" Title="Created By" Width="120px">
                                    <Template Context="protocol">
                                        <RadzenText TextStyle="TextStyle.Body2">
                                            @protocol.UserName
                                        </RadzenText>
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn TItem="ProtocolDto" Property="Interventions" Title="Interventions" Width="100px">
                                    <Template Context="protocol">
                                        <RadzenBadge Text="@protocol.Interventions.Count.ToString()" 
                                                   BadgeStyle="BadgeStyle.Info" 
                                                   Variant="Variant.Filled" />
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn TItem="ProtocolDto" Property="AverageRating" Title="Rating" Width="120px">
                                    <Template Context="protocol">
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                            <RadzenRating @bind-Value="@protocol.AverageRating" ReadOnly="true" Stars="5" />
                                            <RadzenText TextStyle="TextStyle.Caption">
                                                (@protocol.RatingCount)
                                            </RadzenText>
                                        </RadzenStack>
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn TItem="ProtocolDto" Title="Actions" Width="100px" Sortable="false">
                                    <Template Context="protocol">
                                        <RadzenButton Text="View" 
                                                    ButtonStyle="ButtonStyle.Primary" 
                                                    Size="ButtonSize.Small" 
                                                    Click="@(() => ViewProtocol(protocol.Id))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    }
                    else if (!isLoadingPublic)
                    {
                        <RadzenCard>
                            <RadzenStack Gap="1rem" class="rz-text-align-center">
                                <RadzenText TextStyle="TextStyle.H6">
                                    No public protocols found
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @if (!string.IsNullOrEmpty(searchTerm))
                                    {
                                        <text>Try adjusting your search criteria.</text>
                                    }
                                    else
                                    {
                                        <text>No public protocols are available at the moment.</text>
                                    }
                                </RadzenText>
                            </RadzenStack>
                        </RadzenCard>
                    }
                </RadzenStack>
            </RadzenTabsItem>
            
            @if (AuthService.IsAuthenticated)
            {
                <RadzenTabsItem Text="My Protocols">
                    <RadzenStack Gap="1rem">
                        @if (isLoadingUser)
                        {
                            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                        }
                        else if (userProtocols?.Any() == true)
                        {
                            <RadzenDataGrid Data="@userProtocols" 
                                           TItem="ProtocolDto" 
                                           AllowPaging="true" 
                                           PageSize="10" 
                                           AllowSorting="false">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="Name" Title="Protocol Name" Width="200px">
                                        <Template Context="protocol">
                                            <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">
                                                @protocol.Name
                                            </RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="Description" Title="Description">
                                        <Template Context="protocol">
                                            <RadzenText TextStyle="TextStyle.Body2" Style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                                @protocol.Description
                                            </RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="Interventions" Title="Interventions" Width="100px">
                                        <Template Context="protocol">
                                            <RadzenBadge Text="@protocol.Interventions.Count.ToString()" 
                                                       BadgeStyle="BadgeStyle.Info" 
                                                       Variant="Variant.Filled" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="CreatedAt" Title="Created" Width="120px">
                                        <Template Context="protocol">
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                @protocol.CreatedAt.ToString("MMM dd, yyyy")
                                            </RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Property="AverageRating" Title="Rating" Width="120px">
                                        <Template Context="protocol">
                                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                                <RadzenRating @bind-Value="@protocol.AverageRating" ReadOnly="true" Stars="5" />
                                                <RadzenText TextStyle="TextStyle.Caption">
                                                    (@protocol.RatingCount)
                                                </RadzenText>
                                            </RadzenStack>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    
                                    <RadzenDataGridColumn TItem="ProtocolDto" Title="Actions" Width="150px" Sortable="false">
                                        <Template Context="protocol">
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                                                <RadzenButton Text="View" 
                                                            ButtonStyle="ButtonStyle.Primary" 
                                                            Size="ButtonSize.Small" 
                                                            Click="@(() => ViewProtocol(protocol.Id))" />
                                                <RadzenButton Text="Edit" 
                                                            ButtonStyle="ButtonStyle.Secondary" 
                                                            Size="ButtonSize.Small" 
                                                            Click="@(() => EditProtocol(protocol.Id))" />
                                            </RadzenStack>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        }
                        else if (!isLoadingUser)
                        {
                            <RadzenCard>
                                <RadzenStack Gap="1rem" class="rz-text-align-center">
                                    <RadzenText TextStyle="TextStyle.H6">
                                        No protocols yet
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        Create your first protocol to start tracking your biohacking journey.
                                    </RadzenText>
                                    <RadzenButton Text="Create Protocol" 
                                                ButtonStyle="ButtonStyle.Primary" 
                                                Click="@(() => Navigation.NavigateTo("/protocols/create"))" />
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </RadzenStack>
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
</RadzenStack>

@code {
    private IEnumerable<ProtocolDto>? publicProtocols;
    private IEnumerable<ProtocolDto>? filteredPublicProtocols;
    private IEnumerable<ProtocolDto>? userProtocols;
    private bool isLoadingPublic = true;
    private bool isLoadingUser = true;
    private string searchTerm = string.Empty;
    private string sortBy = "rating";

    private readonly List<SortOption> sortOptions = new()
    {
        new SortOption { Value = "rating", Text = "Rating (High to Low)" },
        new SortOption { Value = "name", Text = "Name (A-Z)" },
        new SortOption { Value = "newest", Text = "Newest First" },
        new SortOption { Value = "interventions", Text = "Most Interventions" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPublicProtocols();
        if (AuthService.IsAuthenticated)
        {
            await LoadUserProtocols();
        }
    }

    private async Task LoadPublicProtocols()
    {
        isLoadingPublic = true;
        StateHasChanged();

        try
        {
            publicProtocols = await ProtocolService.GetProtocolsAsync();
            ApplyFiltersAndSort();
        }
        catch (Exception ex)
        {
            // Handle error
            publicProtocols = new List<ProtocolDto>();
            filteredPublicProtocols = new List<ProtocolDto>();
        }
        finally
        {
            isLoadingPublic = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserProtocols()
    {
        if (!AuthService.IsAuthenticated) return;

        isLoadingUser = true;
        StateHasChanged();

        try
        {
            var currentUserId = AuthService.CurrentUserId;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                userProtocols = await ProtocolService.GetUserProtocolsAsync(currentUserId);
            }
        }
        catch (Exception ex)
        {
            // Handle error
            userProtocols = new List<ProtocolDto>();
        }
        finally
        {
            isLoadingUser = false;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFiltersAndSort();
    }

    private void OnSortChanged()
    {
        ApplyFiltersAndSort();
    }

    private void ApplyFiltersAndSort()
    {
        if (publicProtocols == null) return;

        var filtered = publicProtocols.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(p => 
                p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Interventions.Any(i => i.InterventionName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply sorting
        filtered = sortBy switch
        {
            "rating" => filtered.OrderByDescending(p => p.AverageRating).ThenBy(p => p.Name),
            "name" => filtered.OrderBy(p => p.Name),
            "newest" => filtered.OrderByDescending(p => p.CreatedAt),
            "interventions" => filtered.OrderByDescending(p => p.Interventions.Count).ThenBy(p => p.Name),
            _ => filtered.OrderByDescending(p => p.AverageRating).ThenBy(p => p.Name)
        };

        filteredPublicProtocols = filtered.ToList();
        StateHasChanged();
    }

    private void OnRowClick(DataGridRowMouseEventArgs<ProtocolDto> args)
    {
        ViewProtocol(args.Data.Id);
    }

    private void ViewProtocol(int id)
    {
        Navigation.NavigateTo($"/protocols/{id}");
    }

    private void EditProtocol(int id)
    {
        Navigation.NavigateTo($"/protocols/{id}/edit");
    }

    private class SortOption
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }
}
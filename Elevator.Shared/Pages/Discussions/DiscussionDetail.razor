@page "/discussions/{id:int}"
@using Elevator.Shared.Services.Interfaces
@using Elevator.Shared.Services.DTOs
@using Radzen
@using Radzen.Blazor
@inject IDiscussionService DiscussionService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>@(discussion?.Title ?? "Discussion") - Elevator</PageTitle>

@if (isLoading)
{
    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else if (discussion == null)
{
    <RadzenCard>
        <RadzenStack Gap="1rem" class="rz-text-align-center">
            <RadzenText TextStyle="TextStyle.H5">
                Discussion Not Found
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1">
                The requested discussion could not be found.
            </RadzenText>
            <RadzenButton Text="Back" 
                        ButtonStyle="ButtonStyle.Primary" 
                        Click="@(() => Navigation.NavigateTo(-1))" />
        </RadzenStack>
    </RadzenCard>
}
else
{
    <RadzenStack Gap="2rem">
        <!-- Discussion Header -->
        <RadzenCard>
            <RadzenStack Gap="1rem">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start">
                    <RadzenStack Gap="0.5rem">
                        <RadzenText TextStyle="TextStyle.H4">
                            @discussion.Title
                        </RadzenText>
                        @if (discussion.InterventionId.HasValue)
                        {
                            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">
                                Discussion about 
                                <RadzenLink Path="@($"/interventions/{discussion.InterventionId}")" 
                                          Text="@discussion.InterventionName" 
                                          Style="font-weight: 600;" />
                            </RadzenText>
                        }
                        else if (discussion.ProtocolId.HasValue)
                        {
                            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary-color);">
                                Discussion about 
                                <RadzenLink Path="@($"/protocols/{discussion.ProtocolId}")" 
                                          Text="@discussion.ProtocolName" 
                                          Style="font-weight: 600;" />
                            </RadzenText>
                        }
                    </RadzenStack>
                    
                    <RadzenButton Text="← Back" 
                                ButtonStyle="ButtonStyle.Light" 
                                Click="@(() => Navigation.NavigateTo(-1))" />
                </RadzenStack>
                
                <RadzenText TextStyle="TextStyle.Body1">
                    @discussion.Content
                </RadzenText>
                
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="2rem">
                    <RadzenText TextStyle="TextStyle.Caption">
                        by @discussion.UserName on @discussion.CreatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")
                    </RadzenText>
                    
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                        <VotingComponent DiscussionId="@discussion.Id" 
                                       UpvoteCount="@discussion.UpvoteCount" 
                                       DownvoteCount="@discussion.DownvoteCount" 
                                       OnVoteChanged="@OnDiscussionVoteChanged" />
                        
                        <RadzenText TextStyle="TextStyle.Caption">
                            @discussion.CommentCount @(discussion.CommentCount == 1 ? "comment" : "comments")
                        </RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>

        <!-- Add Comment Section -->
        @if (AuthService.IsAuthenticated)
        {
            <RadzenCard>
                <RadzenStack Gap="1rem">
                    <RadzenText TextStyle="TextStyle.H6">
                        Add a Comment
                    </RadzenText>
                    
                    <RadzenTextArea @bind-Value="@newCommentContent" 
                                  Placeholder="Share your thoughts..." 
                                  Rows="4" 
                                  Style="width: 100%;" />
                    
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
                        <RadzenButton Text="Cancel" 
                                    ButtonStyle="ButtonStyle.Light" 
                                    Click="@(() => newCommentContent = string.Empty)" />
                        <RadzenButton Text="Post Comment" 
                                    ButtonStyle="ButtonStyle.Primary" 
                                    Click="@PostComment" 
                                    Disabled="@(string.IsNullOrWhiteSpace(newCommentContent))"
                                    IsBusy="@isPostingComment" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        }
        else
        {
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Body2" class="rz-text-align-center">
                    <RadzenLink Path="/login" Text="Login" /> to join the discussion
                </RadzenText>
            </RadzenCard>
        }

        <!-- Comments Section -->
        <RadzenCard>
            <RadzenStack Gap="1rem">
                <RadzenText TextStyle="TextStyle.H5">
                    Comments (@discussion.CommentCount)
                </RadzenText>
                
                @if (discussion.Comments.Any())
                {
                    <RadzenStack Gap="1rem">
                        @foreach (var comment in discussion.Comments.Where(c => c.ParentCommentId == null).OrderByDescending(c => c.UpvoteCount - c.DownvoteCount))
                        {
                            <CommentComponent Comment="@comment" 
                                            OnReplyPosted="@OnCommentReplyPosted" 
                                            OnVoteChanged="@OnCommentVoteChanged" />
                        }
                    </RadzenStack>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Body2" class="rz-text-align-center">
                        No comments yet. Be the first to share your thoughts!
                    </RadzenText>
                }
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private DiscussionDetailDto? discussion;
    private bool isLoading = true;
    private string newCommentContent = string.Empty;
    private bool isPostingComment = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDiscussion();
    }

    private async Task LoadDiscussion()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            discussion = await DiscussionService.GetDiscussionAsync(Id);
        }
        catch (Exception ex)
        {
            discussion = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task PostComment()
    {
        if (!AuthService.IsAuthenticated || discussion == null || string.IsNullOrWhiteSpace(newCommentContent))
            return;

        isPostingComment = true;
        StateHasChanged();

        try
        {
            var createCommentDto = new CreateCommentDto
            {
                Content = newCommentContent.Trim(),
                DiscussionId = discussion.Id,
                UserId = AuthService.CurrentUserId
            };

            var newComment = await DiscussionService.AddCommentAsync(createCommentDto);
            
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Comment Posted",
                Detail = "Your comment has been added to the discussion.",
                Duration = 3000
            });

            newCommentContent = string.Empty;
            await LoadDiscussion(); // Reload to show the new comment
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Comment Failed",
                Detail = "Failed to post your comment. Please try again.",
                Duration = 4000
            });
        }
        finally
        {
            isPostingComment = false;
            StateHasChanged();
        }
    }

    private async Task OnCommentReplyPosted()
    {
        await LoadDiscussion(); // Reload to show the new reply
    }

    private async Task OnDiscussionVoteChanged()
    {
        await LoadDiscussion(); // Reload to show updated vote counts
    }

    private async Task OnCommentVoteChanged()
    {
        await LoadDiscussion(); // Reload to show updated vote counts
    }
}
@using Elevator.Shared.Services.Interfaces
@using Radzen
@using Radzen.Blazor
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<RadzenHeader>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="1rem" class="rz-p-4">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
            <RadzenLink Path="/" Style="text-decoration: none;">
                <RadzenText TextStyle="TextStyle.H5" Style="color: var(--rz-primary);">
                    ðŸ§¬ Elevator
                </RadzenText>
            </RadzenLink>
            
            @if (authState?.IsAuthenticated == true)
            {
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                    <RadzenLink Path="/interventions" Text="Interventions" />
                    <RadzenLink Path="/protocols" Text="Protocols" />
                    <RadzenLink Path="/profile" Text="Profile" />
                </RadzenStack>
            }
        </RadzenStack>
        
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
            @if (authState?.IsAuthenticated == true)
            {
                <RadzenText TextStyle="TextStyle.Body2">
                    Welcome, @GetDisplayName()
                </RadzenText>
                <RadzenButton Text="Logout" 
                            ButtonStyle="ButtonStyle.Light" 
                            Size="ButtonSize.Small" 
                            Click="@HandleLogout" 
                            IsBusy="@isLoggingOut" />
            }
            else
            {
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                    <RadzenButton Text="Login" 
                                ButtonStyle="ButtonStyle.Light" 
                                Size="ButtonSize.Small" 
                                Click="@(() => Navigation.NavigateTo("/login"))" />
                    <RadzenButton Text="Register" 
                                ButtonStyle="ButtonStyle.Primary" 
                                Size="ButtonSize.Small" 
                                Click="@(() => Navigation.NavigateTo("/register"))" />
                </RadzenStack>
            }
        </RadzenStack>
    </RadzenStack>
</RadzenHeader>

@code {
    [CascadingParameter] public AuthenticationStateProvider.AuthenticationState? authState { get; set; }
    
    private bool isLoggingOut = false;

    private string GetDisplayName()
    {
        if (authState?.CurrentUser != null)
        {
            var user = authState.CurrentUser;
            if (!string.IsNullOrEmpty(user.FirstName))
            {
                return user.FirstName;
            }
            return user.Email;
        }
        return "User";
    }

    private async Task HandleLogout()
    {
        isLoggingOut = true;
        StateHasChanged();

        try
        {
            await AuthService.LogoutAsync();
            
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Logged Out",
                Detail = "You have been successfully logged out.",
                Duration = 3000
            });
            
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Logout Error",
                Detail = "An error occurred while logging out. Please try again.",
                Duration = 4000
            });
        }
        finally
        {
            isLoggingOut = false;
            StateHasChanged();
        }
    }
}
@using Elevator.Shared.Services.Interfaces
@using Elevator.Shared.Services.DTOs
@using Radzen
@using Radzen.Blazor
@inherits LayoutComponentBase
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="1rem" class="rz-p-4">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenLink Path="/" Style="text-decoration: none;">
                    <RadzenText TextStyle="TextStyle.H5" Style="color: var(--rz-primary);">
                        🧬 Elevator
                    </RadzenText>
                </RadzenLink>
                
                @if (isAuthenticated)
                {
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                        <RadzenLink Path="/interventions" Text="Interventions" />
                        <RadzenLink Path="/protocols" Text="Protocols" />
                        <RadzenLink Path="/profile" Text="Profile" />
                    </RadzenStack>
                }
            </RadzenStack>
            
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                @if (isAuthenticated)
                {
                    <RadzenText TextStyle="TextStyle.Body2">
                        Welcome, @GetDisplayName()
                    </RadzenText>
                    <RadzenButton Text="Logout" 
                                ButtonStyle="ButtonStyle.Light" 
                                Size="ButtonSize.Small" 
                                Click="@HandleLogout" 
                                IsBusy="@isLoggingOut" />
                }
                else
                {
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                        <RadzenButton Text="Login" 
                                    ButtonStyle="ButtonStyle.Light" 
                                    Size="ButtonSize.Small" 
                                    Click="@(() => Navigation.NavigateTo("/login"))" />
                        <RadzenButton Text="Register" 
                                    ButtonStyle="ButtonStyle.Primary" 
                                    Size="ButtonSize.Small" 
                                    Click="@(() => Navigation.NavigateTo("/register"))" />
                    </RadzenStack>
                }
            </RadzenStack>
        </RadzenStack>
    </RadzenHeader>

    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    
    <RadzenFooter>
        <div class="rz-text-align-center rz-p-4">
            <RadzenText TextStyle="TextStyle.Caption">
                © 2025 Elevator - Biohacking Platform
            </RadzenText>
        </div>
    </RadzenFooter>
</RadzenLayout>

<RadzenNotification />

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool isAuthenticated = false;
    private UserDto? currentUser = null;
    private bool isLoggingOut = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshAuthenticationState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshAuthenticationState();
            StateHasChanged();
        }
    }

    private async Task RefreshAuthenticationState()
    {
        try
        {
            isAuthenticated = AuthService.IsAuthenticated;
            if (isAuthenticated)
            {
                currentUser = await AuthService.GetCurrentUserAsync();
            }
            else
            {
                currentUser = null;
            }
        }
        catch
        {
            isAuthenticated = false;
            currentUser = null;
        }
    }

    private string GetDisplayName()
    {
        if (currentUser != null)
        {
            if (!string.IsNullOrEmpty(currentUser.FirstName))
            {
                return currentUser.FirstName;
            }
            return currentUser.Email;
        }
        return "User";
    }

    private async Task HandleLogout()
    {
        isLoggingOut = true;
        StateHasChanged();

        try
        {
            await AuthService.LogoutAsync();
            
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Logged Out",
                Detail = "You have been successfully logged out.",
                Duration = 3000
            });
            
            await RefreshAuthenticationState();
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Logout Error",
                Detail = "An error occurred while logging out. Please try again.",
                Duration = 4000
            });
        }
        finally
        {
            isLoggingOut = false;
            StateHasChanged();
        }
    }
}

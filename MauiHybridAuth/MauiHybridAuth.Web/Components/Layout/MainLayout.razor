@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<RadzenLayout>
    <RadzenHeader>
        <RadzenMenu>
            <RadzenMenuItem Text="Home" Icon="home" NavigateUrl="" />

            <AuthorizeView>
                <NotAuthorized>
                    <RadzenMenuItem Text="Register" Icon="person_add" NavigateUrl="Account/Register" />
                    <RadzenMenuItem Text="Login" Icon="login" NavigateUrl="Account/Login" />
                    <RadzenMenuItem Text="Interventions" Icon="medical_services" NavigateUrl="interventions" />
                </NotAuthorized>
                <Authorized>
                    <RadzenMenuItem Text="Home" Icon="home" NavigateUrl="" />
                    <RadzenMenuItem Text="Interventions" Icon="medical_services" NavigateUrl="interventions" />

                    <RadzenMenuItem Text="@context.User.Identity?.Name" Icon="person" NavigateUrl="Account/Manage" />

                    <RadzenMenuItem>
                        <form action="Account/Logout" method="post" style="display: inline;">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" ButtonType="ButtonType.Submit" Icon="logout"
                                Text="Logout" />
                        </form>
                    </RadzenMenuItem>
                </Authorized>
            </AuthorizeView>
        </RadzenMenu>
    </RadzenHeader>

    <RadzenBody>
        <RadzenContainer>
            @Body
        </RadzenContainer>
    </RadzenBody>
</RadzenLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

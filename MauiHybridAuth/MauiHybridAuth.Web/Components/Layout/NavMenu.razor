@implements IDisposable
@inject NavigationManager NavigationManager
@inject ICategoryService CategoryService
@using MauiHybridAuth.Shared.Services
@using MauiHybridAuth.Shared.Models
@using MauiHybridAuth.Shared.Extensions

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Elevator</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <AuthorizeView>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="interventions">
                        <span class="bi bi-heart-pulse-nav-menu" aria-hidden="true"></span> Interventions
                    </NavLink>
                </div>

                @* Category Navigation *@
                @if (rootCategories != null && rootCategories.Any())
                {
                    @foreach (var category in rootCategories)
                    {
                        <div class="nav-item px-3">
                            <NavLink class="nav-link category-level-1" href="@GetCategoryUrl(category.Name)">
                                <span class="bi bi-dot" aria-hidden="true"></span> @category.Name.ToTitleCase()
                            </NavLink>

                            @* Subcategories *@
                            @if (category.Subcategories?.Any() == true)
                            {
                                @foreach (var subcategory in category.Subcategories)
                                {
                                    <div class="nav-item px-3">
                                        <NavLink class="nav-link category-level-2"
                                            href="@GetCategoryUrl(category.Name, subcategory.Name)">
                                            <span class="bi bi-dash" aria-hidden="true"></span> @subcategory.Name.ToTitleCase()
                                        </NavLink>

                                        @* Sub-subcategories *@
                                        @if (subcategory.Subcategories?.Any() == true)
                                        {
                                            @foreach (var subSubcategory in subcategory.Subcategories)
                                            {
                                                <div class="nav-item px-3">
                                                    <NavLink class="nav-link category-level-3"
                                                        href="@GetCategoryUrl(category.Name, subcategory.Name, subSubcategory.Name)">
                                                        <span class="bi bi-arrow-return-right" aria-hidden="true"></span>
                                                        @subSubcategory.Name.ToTitleCase()
                                                    </NavLink>
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            }
                        </div>
                    }
                }

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="interventions">
                        <span class="bi bi-heart-pulse-nav-menu" aria-hidden="true"></span> Interventions
                    </NavLink>
                </div>



                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private List<Category> rootCategories = new();

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        // Load categories
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            var allCategories = await CategoryService.GetAllCategoriesAsync();

            // Build the hierarchical structure
            rootCategories = allCategories.Where(c => c.Parent == null).ToList();

            foreach (var rootCategory in rootCategories)
            {
                LoadSubcategories(rootCategory, allCategories);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void LoadSubcategories(Category parent, List<Category> allCategories)
    {
        var subcategories = allCategories.Where(c => c.ParentId == parent.Id).ToList();
        parent.Subcategories = subcategories;

        foreach (var subcategory in subcategories)
        {
            LoadSubcategories(subcategory, allCategories);
        }
    }

    private string GetCategoryUrl(string category1)
    {
        return $"interventions/{Uri.EscapeDataString(category1.ToLower())}";
    }

    private string GetCategoryUrl(string category1, string category2)
    {
        return $"interventions/{Uri.EscapeDataString(category1.ToLower())}/{Uri.EscapeDataString(category2.ToLower())}";
    }

    private string GetCategoryUrl(string category1, string category2, string category3)
    {
        return
        $"interventions/{Uri.EscapeDataString(category1.ToLower())}/{Uri.EscapeDataString(category2.ToLower())}/{Uri.EscapeDataString(category3.ToLower())}";
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

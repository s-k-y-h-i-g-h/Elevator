@page "/interventions/{category1}"
@page "/interventions/{category1}/{category2}"
@page "/interventions/{category1}/{category2}/{category3}"

@using MauiHybridAuth.Shared.Models
@using MauiHybridAuth.Shared.Services
@using MauiHybridAuth.Shared.Components.Categories
@inject ICompoundService CompoundService

<PageTitle>Category</PageTitle>

<div class="container-fluid">
    <!-- Side by Side Layout: Category Component + Interventions Table -->
    <div class="row g-4">
        <!-- Category Component Column (Left Side) - Now taking majority -->
        <div class="col-lg-8 col-md-7">
            <div class="position-sticky" style="top: 1rem;">
                @if (categoryComponentType != null)
                {
                    <div class="card shadow">
                        <div class="card-body">
                            <DynamicComponent Type="categoryComponentType" />
                        </div>
                    </div>
                }
                else
                {
                    <div class="card shadow">
                        <div class="card-body">
                            <div class="alert alert-info text-center">
                                <i class="bi bi-info-circle-fill"></i>
                                <h4>No category information Found</h4>
                                <p>The @Category1 category has no information available.</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Interventions Table Column (Right Side) - Now smaller -->
        <div class="col-lg-4 col-md-5">
            <div class="card shadow">
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 text-muted">Loading interventions...</p>
                        </div>
                    }
                    else if (compounds == null || !compounds.Any())
                    {
                        <div class="alert alert-info text-center">
                            <i class="bi bi-info-circle-fill"></i>
                            <h4>No Interventions Found</h4>
                            <p>There are no compounds in the database yet. Please check if the database has been seeded.</p>
                        </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(Category1))
                        {
                            <h1>Interventions for @Category1</h1>
                            <div class="table-responsive">
                                <table class="table table-hover table-striped">
                                    <thead class="table-dark">
                                        <tr>
                                            <th scope="col" class="text-center" style="width: 50px;">#</th>
                                            <th scope="col">
                                                <i class="bi bi-tag-fill"></i> Name
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int index = 1;
                                        }
                                        @foreach (var compound in compounds)
                                        {
                                            <tr>
                                                <td class="text-center fw-bold text-muted">@index</td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2"
                                                            style="width: 32px; height: 32px; font-size: 12px; font-weight: bold;">
                                                            @compound.Name.Substring(0, Math.Min(2, compound.Name.Length)).ToUpper()
                                                        </div>
                                                        <strong>@compound.Name</strong>
                                                    </div>
                                                </td>
                                            </tr>
                                            index++;
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter] public string? Category1 { get; set; }
    [Parameter] public string? Category2 { get; set; }
    [Parameter] public string? Category3 { get; set; }

    private List<Compound> compounds = new();
    private bool isLoading = true;
    private Type? categoryComponentType;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompounds();
        LoadCategoryComponent(); // Load component on initial load
    }

    protected override async Task OnParametersSetAsync()
    {
        // This runs when route parameters change
        await LoadCompounds();
        LoadCategoryComponent(); // Reload component when parameters change
    }

    private void LoadCategoryComponent()
    {
        if (!string.IsNullOrEmpty(Category1))
        {
            // Try to find a component with the category name
            var titleCaseCategory = char.ToUpper(Category1[0]) + Category1.Substring(1).ToLower();
            var componentName = $"MauiHybridAuth.Shared.Components.Categories.{titleCaseCategory}";
            categoryComponentType = Type.GetType(componentName);
        }
        else
        {
            categoryComponentType = null;
        }
    }

    private async Task LoadCompounds()
    {
        try
        {
            isLoading = true;
            compounds = await CompoundService.GetCompoundsByCategoryAsync(Category1, Category2, Category3);
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a user-friendly message
            Console.WriteLine($"Error loading compounds: {ex.Message}");
            compounds = new List<Compound>();
        }
        finally
        {
            isLoading = false;
        }
    }
}

@page "/interventions/{category1}"
@page "/interventions/{category1}/{category2}"
@page "/interventions/{category1}/{category2}/{category3}"

@using MauiHybridAuth.Shared.Models
@using MauiHybridAuth.Shared.Services
@using MauiHybridAuth.Shared.Components.Categories
@using System.Globalization
@inject IInterventionService InterventionService

<PageTitle>@GetFormattedCategoryPath() - Category</PageTitle>

<div class="container-fluid">
    <!-- Side by Side Layout: Category Component + Interventions Table -->
    <div class="row g-4">
        <!-- Category Component Column (Left Side) - Now taking majority -->
        <div class="col-lg-8 col-md-7">
            <div class="position-sticky" style="top: 1rem;">
                @if (categoryComponentType != null)
                {
                    <div class="card shadow">
                        <div class="card-body">
                            <DynamicComponent Type="categoryComponentType" />
                        </div>
                    </div>
                }
                else
                {
                    <div class="card shadow">
                        <div class="card-body">
                            <div class="alert alert-info text-center">
                                <i class="bi bi-info-circle-fill"></i>
                                <h4>No Category Information Found</h4>
                                <p>The <strong>@GetMostSpecificCategory()</strong> category has no detailed information
                                    available.</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Interventions Table Column (Right Side) - Now smaller -->
        <div class="col-lg-4 col-md-5">
            <div class="card shadow">
                <div class="card-body">
                    <!-- Breadcrumb for category navigation -->
                    <nav aria-label="breadcrumb" class="mb-3">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a href="/interventions">
                                    <i class="bi bi-house-fill"></i> All Interventions
                                </a>
                            </li>
                            @if (!string.IsNullOrEmpty(Category1))
                            {
                                @if (!string.IsNullOrEmpty(Category2))
                                {
                                    <!-- Category1 is a link when Category2 exists -->
                                    <li class="breadcrumb-item">
                                        <a href="/interventions/@Category1">@ToTitleCase(Category1)</a>
                                    </li>
                                }
                                else
                                {
                                    <!-- Category1 is current page when no Category2 -->
                                    <li class="breadcrumb-item active" aria-current="page">@ToTitleCase(Category1)</li>
                                }
                            }
                            @if (!string.IsNullOrEmpty(Category2))
                            {
                                @if (!string.IsNullOrEmpty(Category3))
                                {
                                    <!-- Category2 is a link when Category3 exists -->
                                    <li class="breadcrumb-item">
                                        <a href="/interventions/@Category1/@Category2">@ToTitleCase(Category2)</a>
                                    </li>
                                }
                                else
                                {
                                    <!-- Category2 is current page when no Category3 -->
                                    <li class="breadcrumb-item active" aria-current="page">@ToTitleCase(Category2)</li>
                                }
                            }
                            @if (!string.IsNullOrEmpty(Category3))
                            {
                                <!-- Category3 is always current page -->
                                <li class="breadcrumb-item active" aria-current="page">@ToTitleCase(Category3)</li>
                            }
                        </ol>
                    </nav>

                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 text-muted">Loading interventions...</p>
                        </div>
                    }
                    else if (interventions == null || !interventions.Any())
                    {
                        <div class="alert alert-info text-center">
                            <i class="bi bi-info-circle-fill"></i>
                            <h4>No Interventions Found</h4>
                            <p>No interventions found for <strong>@GetFormattedCategoryPath()</strong>.</p>
                            <a href="/interventions" class="btn btn-primary btn-sm">
                                <i class="bi bi-arrow-left"></i> View All Interventions
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover table-striped table-sm">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col" class="text-center" style="width: 30px;">#</th>
                                        <th scope="col">
                                            <i class="bi bi-tag-fill"></i> Name
                                        </th>
                                        <th scope="col" style="width: 70px;">
                                            <i class="bi bi-diagram-3"></i> Type
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int index = 1;
                                    }
                                    @foreach (var intervention in interventions)
                                    {
                                        <tr>
                                            <td class="text-center fw-bold text-muted small">@index</td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="@GetTypeIconClass(intervention) text-white rounded-circle d-flex align-items-center justify-content-center me-2"
                                                        style="width: 24px; height: 24px; font-size: 10px; font-weight: bold;">
                                                        @intervention.Name.Substring(0, Math.Min(2,
                                                        intervention.Name.Length)).ToUpper()
                                            </div>
                                            <span class="small">@intervention.Name</span>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge @GetTypeBadgeClass(intervention) small">
                                            @GetInterventionTypeShortName(intervention)
                                        </span>
                                    </td>
                                </tr>
                                                                index++;
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter] public string? Category1 { get; set; }
    [Parameter] public string? Category2 { get; set; }
    [Parameter] public string? Category3 { get; set; }

    private List<Intervention> interventions = new();
    private bool isLoading = true;
    private Type? categoryComponentType;

    protected override async Task OnInitializedAsync()
    {
        await LoadInterventions();
        LoadCategoryComponent(); // Load component on initial load
    }

    protected override async Task OnParametersSetAsync()
    {
        // This runs when route parameters change
        await LoadInterventions();
        LoadCategoryComponent(); // Reload component when parameters change
    }

    private void LoadCategoryComponent()
    {
        // Check for the most specific category first (category3), then category2, then category1
        string targetCategory = null;

        if (!string.IsNullOrEmpty(Category3))
        {
            targetCategory = Category3;
        }
        else if (!string.IsNullOrEmpty(Category2))
        {
            targetCategory = Category2;
        }
        else if (!string.IsNullOrEmpty(Category1))
        {
            targetCategory = Category1;
        }

        if (!string.IsNullOrEmpty(targetCategory))
        {
            // Try to find a component with the category name
            var titleCaseCategory = char.ToUpper(targetCategory[0]) + targetCategory.Substring(1).ToLower();
            var componentName = $"MauiHybridAuth.Shared.Components.Categories.{titleCaseCategory}";
            categoryComponentType = Type.GetType(componentName);
        }
        else
        {
            categoryComponentType = null;
        }
    }

    private async Task LoadInterventions()
    {
        try
        {
            isLoading = true;
            interventions = await InterventionService.GetInterventionsByCategoryAsync(Category1, Category2, Category3);
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a user-friendly message
            Console.WriteLine($"Error loading interventions: {ex.Message}");
            interventions = new List<Intervention>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetCategoryPath()
    {
        var parts = new[] { Category1, Category2, Category3 }.Where(c => !string.IsNullOrEmpty(c)).ToArray();
        return string.Join(" → ", parts);
    }

    private string GetFormattedCategoryPath()
    {
        var parts = new[] { Category1, Category2, Category3 }.Where(c =>
        !string.IsNullOrEmpty(c)).Select(ToTitleCase).ToArray();
        return string.Join(" → ", parts);
    }

    private string GetMostSpecificCategory()
    {
        if (!string.IsNullOrEmpty(Category3))
            return Category3;
        else if (!string.IsNullOrEmpty(Category2))
            return Category2;
        else if (!string.IsNullOrEmpty(Category1))
            return Category1;
        else
            return "Unknown";
    }

    private string ToTitleCase(string text)
    {
        if (string.IsNullOrEmpty(text))
            return string.Empty;

        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(text.ToLower());
    }

    private string GetInterventionTypeShortName(Intervention intervention)
    {
        return intervention switch
        {
            Compound => "Comp",
            Plant => "Plant",
            Formulation => "Form",
            _ => "Unk"
        };
    }

    private string GetTypeIconClass(Intervention intervention)
    {
        return intervention switch
        {
            Compound => "bg-primary",
            Plant => "bg-success",
            Formulation => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetTypeBadgeClass(Intervention intervention)
    {
        return intervention switch
        {
            Compound => "bg-primary",
            Plant => "bg-success",
            Formulation => "bg-warning",
            _ => "bg-secondary"
        };
    }
}

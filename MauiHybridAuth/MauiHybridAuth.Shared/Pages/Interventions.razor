@page "/interventions"

@using MauiHybridAuth.Shared.Models
@using MauiHybridAuth.Shared.Services
@using MauiHybridAuth.Shared.Components.Categories
@inject ICompoundService CompoundService

<PageTitle>Interventions</PageTitle>

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading interventions...</p>
        </div>
    }
    else if (compounds == null || !compounds.Any())
    {
        <div class="alert alert-info text-center">
            <i class="bi bi-info-circle-fill"></i>
            <h4>No Interventions Found</h4>
            <p>There are no compounds in the database yet. Please check if the database has been seeded.</p>
        </div>
    }
    else
    {
            <!-- Stacked Layout: Filter Controls Above Table -->
            <div class="card shadow mb-4">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-funnel-fill text-primary"></i>
                            Filters
                        </h6>
                    </div>
                </div>
            </div>
            
            <div class="card shadow">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th scope="col" class="text-center" style="width: 50px;">#</th>
                                    <th scope="col">
                                        <i class="bi bi-tag-fill"></i> Name
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int index = 1;
                                }
                                @foreach (var compound in compounds)
                                {
                                    <tr>
                                        <td class="text-center fw-bold text-muted">@index</td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2" 
                                                     style="width: 32px; height: 32px; font-size: 12px; font-weight: bold;">
                                                    @compound.Name.Substring(0, Math.Min(2, compound.Name.Length)).ToUpper()
                                                </div>
                                                <strong>@compound.Name</strong>
                                            </div>
                                        </td>
                                    </tr>
                                    index++;
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Compound> compounds = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompounds();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCompounds();
    }

    private async Task LoadCompounds()
    {
        try
        {
            isLoading = true;
            compounds = await CompoundService.GetAllCompoundsAsync();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a user-friendly message
            Console.WriteLine($"Error loading compounds: {ex.Message}");
            compounds = new List<Compound>();
        }
        finally
        {
            isLoading = false;
        }
    }
}

@page "/interventions"

@using MauiHybridAuth.Shared.Models
@using MauiHybridAuth.Shared.Services
@using MauiHybridAuth.Shared.Components.Categories
@inject IInterventionService InterventionService

<PageTitle>Interventions</PageTitle>

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading interventions...</p>
        </div>
    }
    else if (interventions == null || !interventions.Any())
    {
        <div class="alert alert-info text-center">
            <i class="bi bi-info-circle-fill"></i>
            <h4>No Interventions Found</h4>
            <p>There are no interventions in the database yet. Please check if the database has been seeded.</p>
        </div>
    }
    else
    {
        <!-- Header with intervention count -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h2 class="mb-1">
                            <i class="bi bi-capsule text-primary"></i>
                            All Interventions
                        </h2>
                        <p class="text-muted mb-0">
                            Found <strong>@interventions.Count</strong> intervention@(interventions.Count != 1 ? "s" : "")
                        </p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card shadow">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col" class="text-center" style="width: 50px;">#</th>
                                <th scope="col">
                                    <i class="bi bi-tag-fill"></i> Name
                                </th>
                                <th scope="col">
                                    <i class="bi bi-diagram-3"></i> Type
                                </th>
                                <th scope="col">
                                    <i class="bi bi-tags"></i> Categories
                                </th>
                                <th scope="col">
                                    <i class="bi bi-clock"></i> Duration
                                </th>
                                <th scope="col">
                                    <i class="bi bi-prescription2"></i> Dose Range
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int index = 1;
                            }
                            @foreach (var intervention in interventions)
                            {
                                <tr>
                                    <td class="text-center fw-bold text-muted">@index</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="@GetTypeIconClass(intervention) text-white rounded-circle d-flex align-items-center justify-content-center me-2" 
                                                    style="width: 32px; height: 32px; font-size: 12px; font-weight: bold;">
                                                @intervention.Name.Substring(0, Math.Min(2, intervention.Name.Length)).ToUpper()
                                            </div>
                                            <strong>@intervention.Name</strong>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge @GetTypeBadgeClass(intervention)">
                                            @GetInterventionTypeName(intervention)
                                        </span>
                                    </td>
                                    <td>
                                        @if (intervention.Categories.Any())
                                        {
                                            <div class="d-flex flex-wrap gap-1">
                                                @foreach (var category in intervention.Categories.Take(3))
                                                {
                                                    <span class="badge bg-secondary">@category.Name</span>
                                                }
                                                @if (intervention.Categories.Count > 3)
                                                {
                                                    <span class="badge bg-light text-dark">+@(intervention.Categories.Count - 3) more</span>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No categories</span>
                                        }
                                    </td>
                                    <td>
                                        @if (intervention is Substance substance)
                                        {
                                            <span class="text-muted">@substance.Duration</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">N/A</span>
                                        }
                                    </td>
                                    <td>
                                        @if (intervention is Substance substance2)
                                        {
                                            <span class="text-muted">@substance2.DoseRange</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">N/A</span>
                                        }
                                    </td>
                                </tr>
                                index++;
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Intervention> interventions = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadInterventions();
    }

    private async Task LoadInterventions()
    {
        try
        {
            isLoading = true;
            interventions = await InterventionService.GetAllInterventionsAsync();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a user-friendly message
            Console.WriteLine($"Error loading interventions: {ex.Message}");
            interventions = new List<Intervention>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetInterventionTypeName(Intervention intervention)
    {
        return intervention switch
        {
            Compound => "Compound",
            Plant => "Plant",
            Formulation => "Formulation",
            _ => "Unknown"
        };
    }

    private string GetTypeIconClass(Intervention intervention)
    {
        return intervention switch
        {
            Compound => "bg-primary",
            Plant => "bg-success",
            Formulation => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetTypeBadgeClass(Intervention intervention)
    {
        return intervention switch
        {
            Compound => "bg-primary",
            Plant => "bg-success",
            Formulation => "bg-warning",
            _ => "bg-secondary"
        };
    }
}
